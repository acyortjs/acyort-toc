[{"url":"https://api.github.com/repos/LoeiFy/Recordum/issues/20","repository_url":"https://api.github.com/repos/LoeiFy/Recordum","labels_url":"https://api.github.com/repos/LoeiFy/Recordum/issues/20/labels{/name}","comments_url":"https://api.github.com/repos/LoeiFy/Recordum/issues/20/comments","events_url":"https://api.github.com/repos/LoeiFy/Recordum/issues/20/events","html_url":"https://github.com/LoeiFy/Recordum/issues/20","id":244718742,"number":20,"title":"[time] js 使用 setTimeout 排序","user":{"login":"LoeiFy","id":2193211,"avatar_url":"https://avatars0.githubusercontent.com/u/2193211?v=4","gravatar_id":"","url":"https://api.github.com/users/LoeiFy","html_url":"https://github.com/LoeiFy","followers_url":"https://api.github.com/users/LoeiFy/followers","following_url":"https://api.github.com/users/LoeiFy/following{/other_user}","gists_url":"https://api.github.com/users/LoeiFy/gists{/gist_id}","starred_url":"https://api.github.com/users/LoeiFy/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/LoeiFy/subscriptions","organizations_url":"https://api.github.com/users/LoeiFy/orgs","repos_url":"https://api.github.com/users/LoeiFy/repos","events_url":"https://api.github.com/users/LoeiFy/events{/privacy}","received_events_url":"https://api.github.com/users/LoeiFy/received_events","type":"User","site_admin":false},"labels":[{"id":548066947,"url":"https://api.github.com/repos/LoeiFy/Recordum/labels/Javascript","name":"Javascript","color":"d4c5f9","default":false}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":{"url":"https://api.github.com/repos/LoeiFy/Recordum/milestones/1","html_url":"https://github.com/LoeiFy/Recordum/milestone/1","labels_url":"https://api.github.com/repos/LoeiFy/Recordum/milestones/1/labels","id":2983644,"number":1,"title":"blog","description":"","creator":{"login":"LoeiFy","id":2193211,"avatar_url":"https://avatars0.githubusercontent.com/u/2193211?v=4","gravatar_id":"","url":"https://api.github.com/users/LoeiFy","html_url":"https://github.com/LoeiFy","followers_url":"https://api.github.com/users/LoeiFy/followers","following_url":"https://api.github.com/users/LoeiFy/following{/other_user}","gists_url":"https://api.github.com/users/LoeiFy/gists{/gist_id}","starred_url":"https://api.github.com/users/LoeiFy/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/LoeiFy/subscriptions","organizations_url":"https://api.github.com/users/LoeiFy/orgs","repos_url":"https://api.github.com/users/LoeiFy/repos","events_url":"https://api.github.com/users/LoeiFy/events{/privacy}","received_events_url":"https://api.github.com/users/LoeiFy/received_events","type":"User","site_admin":false},"open_issues":5,"closed_issues":0,"state":"open","created_at":"2017-12-16T07:05:42Z","updated_at":"2017-12-16T07:09:01Z","due_on":null,"closed_at":null},"comments":0,"created_at":"2017-07-21T16:21:41Z","updated_at":"2017-12-23T09:09:48Z","closed_at":null,"author_association":"OWNER","body":"原理就是将要排序的数组的每一个项作为 `setTimeout` 时间参数，然后就可以排序了\r\n\r\n排序时间跟数组最大值绝对值有关 :)\r\n\r\n需要对数组的负数项做一下处理，因为 `setTimeout` 参数负数的话跟参数 0 是一样的\r\n\r\n例子 [JSFiddle](https://jsfiddle.net/am0200/o0sz55pq/)\r\n\r\n具体代码说明:\r\n\r\n```js\r\n// 需要排序数组\r\nconst numbers = [8, 0, 3, -1, 9, -3, -767, 4, 111, 999, 89];\r\n\r\nasync function sortArr(arr) {\r\n  const left = arr.filter(a => a < 0).map(a => a * -1) // 获取数组负数项并转成正数\r\n  const right = arr.filter(a => a >= 0) // 数组正数项\r\n  const sortLeft = (await sort(left)).map(a => a * -1).reverse() // 负数项排序后需要反向\r\n  const sortRight = await sort(right) // 正数项排序\r\n  \r\n  return sortLeft.concat(sortRight)\r\n} \r\n\r\nfunction sort(arr) {\r\n  return new Promise((resolve) => {\r\n    let len = arr.length\r\n    const back = []\r\n    \r\n    arr.forEach(item => {\r\n      setTimeout(() => {\r\n        back.push(item)\r\n        len -= 1\r\n    \tif (len === 0) {\r\n          resolve(back) // 完成排序\r\n        }\r\n      }, item) // 以每个项作为时间\r\n    })\r\n  })\r\n}\r\n\r\n;(async () => {\r\n  document.body.innerHTML = 'Before: ' + numbers.join(', ') + '<br>After: ' + (await sortArr(numbers)).join(', ')\r\n})()\r\n\r\n// 排序结果: [-767, -3, -1, 0, 3, 4, 8, 9, 89, 111, 999]\r\n```\r\n\r\n最后说明一下，这只是一种特别的排序方式，请不要去纠结效率时间等其他问题"},{"url":"https://api.github.com/repos/LoeiFy/Recordum/issues/19","repository_url":"https://api.github.com/repos/LoeiFy/Recordum","labels_url":"https://api.github.com/repos/LoeiFy/Recordum/issues/19/labels{/name}","comments_url":"https://api.github.com/repos/LoeiFy/Recordum/issues/19/comments","events_url":"https://api.github.com/repos/LoeiFy/Recordum/issues/19/events","html_url":"https://github.com/LoeiFy/Recordum/issues/19","id":225371660,"number":19,"title":"AcyOrt - 基于 Node.js 博客生成程序","user":{"login":"LoeiFy","id":2193211,"avatar_url":"https://avatars0.githubusercontent.com/u/2193211?v=4","gravatar_id":"","url":"https://api.github.com/users/LoeiFy","html_url":"https://github.com/LoeiFy","followers_url":"https://api.github.com/users/LoeiFy/followers","following_url":"https://api.github.com/users/LoeiFy/following{/other_user}","gists_url":"https://api.github.com/users/LoeiFy/gists{/gist_id}","starred_url":"https://api.github.com/users/LoeiFy/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/LoeiFy/subscriptions","organizations_url":"https://api.github.com/users/LoeiFy/orgs","repos_url":"https://api.github.com/users/LoeiFy/repos","events_url":"https://api.github.com/users/LoeiFy/events{/privacy}","received_events_url":"https://api.github.com/users/LoeiFy/received_events","type":"User","site_admin":false},"labels":[{"id":534950544,"url":"https://api.github.com/repos/LoeiFy/Recordum/labels/Blog","name":"Blog","color":"f9d0c4","default":false},{"id":534950402,"url":"https://api.github.com/repos/LoeiFy/Recordum/labels/Github","name":"Github","color":"bfd4f2","default":false},{"id":534950261,"url":"https://api.github.com/repos/LoeiFy/Recordum/labels/Nodejs","name":"Nodejs","color":"bfdadc","default":false}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":{"url":"https://api.github.com/repos/LoeiFy/Recordum/milestones/2","html_url":"https://github.com/LoeiFy/Recordum/milestone/2","labels_url":"https://api.github.com/repos/LoeiFy/Recordum/milestones/2/labels","id":2983646,"number":2,"title":"acyort","description":"","creator":{"login":"LoeiFy","id":2193211,"avatar_url":"https://avatars0.githubusercontent.com/u/2193211?v=4","gravatar_id":"","url":"https://api.github.com/users/LoeiFy","html_url":"https://github.com/LoeiFy","followers_url":"https://api.github.com/users/LoeiFy/followers","following_url":"https://api.github.com/users/LoeiFy/following{/other_user}","gists_url":"https://api.github.com/users/LoeiFy/gists{/gist_id}","starred_url":"https://api.github.com/users/LoeiFy/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/LoeiFy/subscriptions","organizations_url":"https://api.github.com/users/LoeiFy/orgs","repos_url":"https://api.github.com/users/LoeiFy/repos","events_url":"https://api.github.com/users/LoeiFy/events{/privacy}","received_events_url":"https://api.github.com/users/LoeiFy/received_events","type":"User","site_admin":false},"open_issues":2,"closed_issues":0,"state":"open","created_at":"2017-12-16T07:05:53Z","updated_at":"2017-12-16T07:08:17Z","due_on":null,"closed_at":null},"comments":11,"created_at":"2017-05-01T01:52:07Z","updated_at":"2017-12-16T07:08:03Z","closed_at":null,"author_association":"OWNER","body":"AcyOrt 是一个基于 Node.js 的博客工具。通过这个工具，用户只要在 issues 上写自己的博客文章，然后一个简单命令就可以产生博客内容。\r\n\r\n<!-- more -->\r\n\r\n项目地址：https://github.com/acyortjs/acyort\r\n\r\n## 特色说明\r\n\r\n对比 Hexo，基本上的功能都有了，也差不多。这里主要说一下特别的地方\r\n\r\n### 多用户支持\r\n\r\n允许多用户创造，特别适合团队写作，写作用户只要要一个 Github 账号即可。很多大神的 issue 博客就会老是会有人在上面写一些无关内容。只要指定特定写作人，就可以排除掉其他人的无关内容了\r\n\r\n### 写作方便\r\n\r\n基本上是最简单最舒服的写作方式了，直接在 issue 上写博客，借助 GitHub 强大的 markdown 写作工具，连上传图片都是那么的简单拖放即可，仅仅需要联网浏览器即可\r\n\r\n### 博客数据\r\n\r\n因为是存放在 GitHub 上，不用担心数据丢失问题，也不用考虑那些 md 文件要保存在哪里，以及迁移问题\r\n\r\n### 简单安装配置\r\n\r\n和 hexo 不同，AcyOrt 只需要 npm 全局安装一次，就可以到处使用了。\r\n\r\n不需要新建一次博客就还要 `npm install` 一次，一个简单的 `acyort init` 命令就可以生成一个新的博客了。\r\n\r\n配置文件也只有一个 `config.yml`，保存所有配置\r\n\r\n### 自动构建\r\n\r\nAcyOrt 支持 Travis Ci 自动构建，效果就是你在 issue 上写完博客，然后在 GitHub 上点击一个按钮，然后你的博客就更新了。\r\n\r\n不需要 git 操作，不需要自己搭建服务器，也不需要在你本地机器上生成，全程云端生成\r\n\r\n参考：https://github.com/acyortjs/acyortjs.github.io/issues/13 \r\n\r\n以及还有一个视频演示：链接: https://pan.baidu.com/s/1c2rdynQ 密码: 6q8q\r\n\r\n甚至你还可以弄一个 webhook，保存 issue 博客同时就可以自动更新博客，什么都不用做。参考这里：https://github.com/acyortjs/webhook\r\n\r\n### 主题模板相关\r\n\r\n模板基于 `swig`，集成 `liveReload`，自动刷新页面，方便主题修改\r\n\r\n### JSON 输出\r\n\r\n同时支持 json 输出博客内容，方便各种需求\r\n\r\n## 相关 demo\r\n\r\n一个例子：http://acyort.am0200.com/\r\n\r\n基于 JSON：http://aksdj4.am0200.com/\r\n\r\n## 已实现功能\r\n\r\n- 文章功能\r\n- 评论功能\r\n- RSS 输出\r\n- 页面功能\r\n- 标签功能\r\n- 分类功能\r\n- 主题功能\r\n- 封面图\r\n- 文章目录\r\n- 多语言支持\r\n\r\n## 安装使用说明\r\n\r\n安装说明：https://github.com/acyortjs/acyort#readme\r\n\r\n相关文档：https://github.com/acyortjs/acyortjs.github.io/issues\r\n\r\n## 后续功能及说明\r\n\r\n- 插件支持\r\n- 单元测试\r\n- 项目网站\r\n\r\n由于功能还没有完全开发完成，一些功能还在修改当中，所以单元测试还没有弄，相关的支持网站相关也在陆续添加\r\n"},{"url":"https://api.github.com/repos/LoeiFy/Recordum/issues/18","repository_url":"https://api.github.com/repos/LoeiFy/Recordum","labels_url":"https://api.github.com/repos/LoeiFy/Recordum/issues/18/labels{/name}","comments_url":"https://api.github.com/repos/LoeiFy/Recordum/issues/18/comments","events_url":"https://api.github.com/repos/LoeiFy/Recordum/issues/18/events","html_url":"https://github.com/LoeiFy/Recordum/issues/18","id":223304114,"number":18,"title":"Vue JSON 博客(AcyOrt/Vue/Vuex/Webpack)","user":{"login":"LoeiFy","id":2193211,"avatar_url":"https://avatars0.githubusercontent.com/u/2193211?v=4","gravatar_id":"","url":"https://api.github.com/users/LoeiFy","html_url":"https://github.com/LoeiFy","followers_url":"https://api.github.com/users/LoeiFy/followers","following_url":"https://api.github.com/users/LoeiFy/following{/other_user}","gists_url":"https://api.github.com/users/LoeiFy/gists{/gist_id}","starred_url":"https://api.github.com/users/LoeiFy/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/LoeiFy/subscriptions","organizations_url":"https://api.github.com/users/LoeiFy/orgs","repos_url":"https://api.github.com/users/LoeiFy/repos","events_url":"https://api.github.com/users/LoeiFy/events{/privacy}","received_events_url":"https://api.github.com/users/LoeiFy/received_events","type":"User","site_admin":false},"labels":[{"id":548066947,"url":"https://api.github.com/repos/LoeiFy/Recordum/labels/Javascript","name":"Javascript","color":"d4c5f9","default":false},{"id":548037646,"url":"https://api.github.com/repos/LoeiFy/Recordum/labels/Vue","name":"Vue","color":"b60205","default":false},{"id":587677613,"url":"https://api.github.com/repos/LoeiFy/Recordum/labels/webpack","name":"webpack","color":"bfdadc","default":false}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":{"url":"https://api.github.com/repos/LoeiFy/Recordum/milestones/2","html_url":"https://github.com/LoeiFy/Recordum/milestone/2","labels_url":"https://api.github.com/repos/LoeiFy/Recordum/milestones/2/labels","id":2983646,"number":2,"title":"acyort","description":"","creator":{"login":"LoeiFy","id":2193211,"avatar_url":"https://avatars0.githubusercontent.com/u/2193211?v=4","gravatar_id":"","url":"https://api.github.com/users/LoeiFy","html_url":"https://github.com/LoeiFy","followers_url":"https://api.github.com/users/LoeiFy/followers","following_url":"https://api.github.com/users/LoeiFy/following{/other_user}","gists_url":"https://api.github.com/users/LoeiFy/gists{/gist_id}","starred_url":"https://api.github.com/users/LoeiFy/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/LoeiFy/subscriptions","organizations_url":"https://api.github.com/users/LoeiFy/orgs","repos_url":"https://api.github.com/users/LoeiFy/repos","events_url":"https://api.github.com/users/LoeiFy/events{/privacy}","received_events_url":"https://api.github.com/users/LoeiFy/received_events","type":"User","site_admin":false},"open_issues":2,"closed_issues":0,"state":"open","created_at":"2017-12-16T07:05:53Z","updated_at":"2017-12-16T07:08:17Z","due_on":null,"closed_at":null},"comments":2,"created_at":"2017-04-21T07:44:03Z","updated_at":"2017-12-16T07:08:17Z","closed_at":null,"author_association":"OWNER","body":"尝试使用 [AcyOrt ](https://github.com/acyortjs/acyort) 的 JSON 输出功能构建一个博客，顺便用了 vue + webpack 组合开发。\r\n\r\nDEMO: http://aksdj4.am0200.com/\r\n\r\n项目地址: https://github.com/acyortjs/aksdj4\r\n\r\n### 内容 JSON\r\n\r\n使用  [AcyOrt ](https://github.com/acyortjs/acyort) 将项目 [Recordum](https://github.com/LoeiFy/Recordum/issues) issue 生成 JSON: https://github.com/acyortjs/aksdj4/tree/gh-pages/json\r\n\r\n### 开发选择\r\n\r\n基于 webpack 2 + vue 2，值得注意的是 `vue-loader` 已经包含了 `vue-hot-reload-api`, `vue-style-loader`，甚至 postcss，所以 vue 相关的 loader 只需要安装 `vue-loader`, `vue-template-compiler`\r\n\r\n> ES6\r\n\r\n因为我并没有用到很多 ES7 以上的特性，只用到 `Object rest spread` 所以 babel 插件选择了\r\n`babel-plugin-transform-object-rest-spread`, `babel-preset-es2015`\r\n\r\n> CSS 预处理器\r\n\r\n这次使用了 `postcss`，没有选择 `sass`，因为不需要安装那么久，并且加上对应插件也类似的写法，选择插件有：`postcss-cssnext`, `postcss-import`。这里也不需要安装 `Autoprefixer`，因为 cssnext 自带了\r\n\r\n> vue 相关\r\n\r\n使用了 vue/vue-router/vuex/，没有用 `vue-resource`，选择了 `axios`，作者也推荐用 axios: https://medium.com/the-vue-point/retiring-vue-resource-871a82880af4\r\n\r\n### 项目构建\r\n\r\n有几个构建要求，分离相关基础库，修改 js，css 互不影响缓存\r\n\r\n> 分离 css\r\n\r\n使用 `webpack-md5-hash` 插件，使用 `contenthash` 文件名，保证修改 js 不会影响 css\r\n\r\n```js\r\nloaders: {\r\n  postcss: ExtractTextPlugin.extract({\r\n    use: [\r\n      {\r\n        loader: 'css-loader',\r\n        options: {\r\n          minimize: true\r\n        }\r\n      },\r\n      'postcss-loader'\r\n    ],\r\n    fallback: 'vue-style-loader'\r\n  })\r\n}\r\n...\r\nnew ExtractTextPlugin('[name].[contenthash:8].css')\r\n```\r\n\r\n> 提取公共库\r\n\r\n基本上不会修改这些基础库\r\n\r\n```js\r\n{\r\n  entry: {\r\n    vendors: ['axios', 'vue', 'vuex', 'vue-router']\r\n  }\r\n}\r\n...\r\nnew webpack.optimize.CommonsChunkPlugin({\r\n  names: ['vendors', 'manifest']\r\n})\r\n```\r\n\r\n使用 `html-webpack-plugin` 进行自动生成相应资源路径，然后生成的 html 会有 4 个资源路径\r\n\r\n```html\r\n...\r\n<link href=\"/build.0570f616.css\" rel=\"stylesheet\">\r\n...\r\n<script type=\"text/javascript\" src=\"/manifest.d41d8cd9.js\"></script>\r\n<script type=\"text/javascript\" src=\"/vendors.a2c4ab5a.js\"></script>\r\n<script type=\"text/javascript\" src=\"/build.be4b1392.js\"></script>\r\n```\r\n\r\n这里有个问题，虽然现在修改 js，css 文件不会改变，反过来 css 修改 js 也不会改变，但是每次生成的 manifest.xxxxxx.js 可能文件名不一样，但是内容也变化了，这里有一个 issue: https://github.com/erm0l0v/webpack-md5-hash/issues/9\r\n\r\n并且这个 manifest.js 是很小的，纪录一些打包模块信息，单独出来产生一个请求觉得不太好，所以这里选择将这个文件 inject 到 html，这样也可以不管上面所说的文件不一致问题\r\n\r\n使用 `html-webpack-inline-source-plugin` 将 manifest inline 到 index.html\r\n\r\n```js\r\nnew HtmlWebpackPlugin({\r\n  template: 'src/index.html',\r\n  inject: 'body',\r\n  inlineSource: 'manifest+' // 将 manifest 开头的 inline script\r\n})\r\n```\r\n\r\n### 路由选择\r\n\r\nvue-router 也有两种路由模式选择，hash 模式以及 history 模式，history 模式需要服务器支持。因为项目是寄存在 GitHub pages 上，不能配置服务器，但这里还是使用了 history 模式，参考这里: https://github.com/LoeiFy/Recordum/issues/15\r\n\r\n因为 GitHub pages 支持 404.html，所以直接将生成的 index.html 复制生成一份 404.html，那么访问不存在路径就直接访问 404.html，就相当于访问 index.html，虽然这时候的 http code 是 404，但整个项目功能并没有受到影响\r\n"},{"url":"https://api.github.com/repos/LoeiFy/Recordum/issues/17","repository_url":"https://api.github.com/repos/LoeiFy/Recordum","labels_url":"https://api.github.com/repos/LoeiFy/Recordum/issues/17/labels{/name}","comments_url":"https://api.github.com/repos/LoeiFy/Recordum/issues/17/comments","events_url":"https://api.github.com/repos/LoeiFy/Recordum/issues/17/events","html_url":"https://github.com/LoeiFy/Recordum/issues/17","id":217459107,"number":17,"title":"[about] to be continued","user":{"login":"LoeiFy","id":2193211,"avatar_url":"https://avatars0.githubusercontent.com/u/2193211?v=4","gravatar_id":"","url":"https://api.github.com/users/LoeiFy","html_url":"https://github.com/LoeiFy","followers_url":"https://api.github.com/users/LoeiFy/followers","following_url":"https://api.github.com/users/LoeiFy/following{/other_user}","gists_url":"https://api.github.com/users/LoeiFy/gists{/gist_id}","starred_url":"https://api.github.com/users/LoeiFy/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/LoeiFy/subscriptions","organizations_url":"https://api.github.com/users/LoeiFy/orgs","repos_url":"https://api.github.com/users/LoeiFy/repos","events_url":"https://api.github.com/users/LoeiFy/events{/privacy}","received_events_url":"https://api.github.com/users/LoeiFy/received_events","type":"User","site_admin":false},"labels":[{"id":570850843,"url":"https://api.github.com/repos/LoeiFy/Recordum/labels/About","name":"About","color":"d4c5f9","default":false},{"id":570850702,"url":"https://api.github.com/repos/LoeiFy/Recordum/labels/Portfolio","name":"Portfolio","color":"b60205","default":false}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2017-03-28T06:21:23Z","updated_at":"2017-04-19T07:45:08Z","closed_at":null,"author_association":"OWNER","body":"### ABOUT\r\n4+ years of front-end work experiences. Focus on front-end web development & UI/UX Design. Like to discover the creative world\r\n\r\n### SKILLS\r\n- HTML/CSS/JavaScript\r\n- CSS3/HTML5/ES2015\r\n- JQuery/Zepto.js\r\n- Vue.js/Vuex\r\n- React/Redux\r\n- Node.js\r\n- Webpack\r\n- Gulp/Grunt\r\n- Sass/PostCSS\r\n- Git\r\n- UI/UX Design/Photoshop\r\n- Vim\r\n\r\n### CONTACT\r\n- GitHub: https://github.com/LoeiFy\r\n- Email: LoeiFy@gmail.com"},{"url":"https://api.github.com/repos/LoeiFy/Recordum/issues/15","repository_url":"https://api.github.com/repos/LoeiFy/Recordum","labels_url":"https://api.github.com/repos/LoeiFy/Recordum/issues/15/labels{/name}","comments_url":"https://api.github.com/repos/LoeiFy/Recordum/issues/15/comments","events_url":"https://api.github.com/repos/LoeiFy/Recordum/issues/15/events","html_url":"https://github.com/LoeiFy/Recordum/issues/15","id":210285498,"number":15,"title":"不依赖服务端实现 react-router 的 browserHistory","user":{"login":"LoeiFy","id":2193211,"avatar_url":"https://avatars0.githubusercontent.com/u/2193211?v=4","gravatar_id":"","url":"https://api.github.com/users/LoeiFy","html_url":"https://github.com/LoeiFy","followers_url":"https://api.github.com/users/LoeiFy/followers","following_url":"https://api.github.com/users/LoeiFy/following{/other_user}","gists_url":"https://api.github.com/users/LoeiFy/gists{/gist_id}","starred_url":"https://api.github.com/users/LoeiFy/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/LoeiFy/subscriptions","organizations_url":"https://api.github.com/users/LoeiFy/orgs","repos_url":"https://api.github.com/users/LoeiFy/repos","events_url":"https://api.github.com/users/LoeiFy/events{/privacy}","received_events_url":"https://api.github.com/users/LoeiFy/received_events","type":"User","site_admin":false},"labels":[{"id":534950261,"url":"https://api.github.com/repos/LoeiFy/Recordum/labels/Nodejs","name":"Nodejs","color":"bfdadc","default":false},{"id":548037617,"url":"https://api.github.com/repos/LoeiFy/Recordum/labels/React","name":"React","color":"e99695","default":false},{"id":548037602,"url":"https://api.github.com/repos/LoeiFy/Recordum/labels/Router","name":"Router","color":"fef2c0","default":false},{"id":548037646,"url":"https://api.github.com/repos/LoeiFy/Recordum/labels/Vue","name":"Vue","color":"b60205","default":false}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":{"url":"https://api.github.com/repos/LoeiFy/Recordum/milestones/1","html_url":"https://github.com/LoeiFy/Recordum/milestone/1","labels_url":"https://api.github.com/repos/LoeiFy/Recordum/milestones/1/labels","id":2983644,"number":1,"title":"blog","description":"","creator":{"login":"LoeiFy","id":2193211,"avatar_url":"https://avatars0.githubusercontent.com/u/2193211?v=4","gravatar_id":"","url":"https://api.github.com/users/LoeiFy","html_url":"https://github.com/LoeiFy","followers_url":"https://api.github.com/users/LoeiFy/followers","following_url":"https://api.github.com/users/LoeiFy/following{/other_user}","gists_url":"https://api.github.com/users/LoeiFy/gists{/gist_id}","starred_url":"https://api.github.com/users/LoeiFy/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/LoeiFy/subscriptions","organizations_url":"https://api.github.com/users/LoeiFy/orgs","repos_url":"https://api.github.com/users/LoeiFy/repos","events_url":"https://api.github.com/users/LoeiFy/events{/privacy}","received_events_url":"https://api.github.com/users/LoeiFy/received_events","type":"User","site_admin":false},"open_issues":5,"closed_issues":0,"state":"open","created_at":"2017-12-16T07:05:42Z","updated_at":"2017-12-16T07:09:01Z","due_on":null,"closed_at":null},"comments":0,"created_at":"2017-02-26T05:00:33Z","updated_at":"2017-12-16T07:08:26Z","closed_at":null,"author_association":"OWNER","body":"SPA 项目基本上都会用到路由 `router`。react 还有 vue 对应有其路由插件。 react-router 还有 vue-router 都有 hashHistory 和 browserHistory 模式。这里大概说一下两者区别\r\n\r\n<!-- more -->\r\n\r\n- hashHistory: 不需要服务器配置，在 URL 生成一个 hash 来跟踪状态，通常在测试环境使用，也可以作为发布环境使用\r\n- browserHistory: 需要服务器端做配置，路径是真实的URL，是 react-router 官方推荐首选\r\n\r\n大多数情况下，browserHistory 模式明显是优于 hashHistory 模式的，但 browserHistory 需要一定的配置\r\n\r\n### 一般方式\r\n\r\n可以看出，hashHistory 不需要什么配置，但 browserHistory 需要服务端支持，这里简单说一下两种方式做支持，其它方式基本上都是类似\r\n\r\n> 使用 express\r\n\r\n```js\r\nconst app = express()\r\napp.get('*', function (request, response){\r\n  response.sendFile(path.resolve(__dirname, 'index.html'))\r\n})\r\n```\r\n\r\n> 使用 nginx\r\n\r\n```perl\r\nserver {\r\n  ...\r\n  location / {\r\n    try_files $uri /index.html\r\n  }\r\n}\r\n```\r\n\r\n这里说明一下为什么要这样设置，browserHistory 模式下，URL 是指向真实 URL 的资源路径，当通过真实 URL 访问网站的时候（首页），这个时候可以正常加载我们的网站资源，而用户在非首页下手动刷新网页时，由于路径是指向服务器的真实路径，但该路径下并没有相关资源，用户访问的资源不存在，返回给用户的是 404 错误\r\n\r\n### 另一种方式\r\n\r\n通过上面所说的原理，简单起来说就是 browserHistory 模式下，需要每个路由下都要有对应的资源存在，就不会产生 404 错误，所以如果不借助服务端的话，又要实现这种模式，这种场景在自己不能配置服务器时候会碰到，例如把项目部署到 `GitHub pages` 上。那该怎么办呢\r\n\r\n> 那么就产生 **对应资源** \r\n\r\n所以，我们的做法就是在每个 **路由路径** 下，都放置一个跟首页一样的 `index.html`\r\n\r\n下面是做法，当然也是有各种方式的，都是可以类推的\r\n\r\n假定我们有以下的路由设定，这里以 react-router 为例子\r\n\r\n```js\r\nexport default (\r\n  <Route path=\"/\" component={App}>\r\n    <IndexRoute component={HomePage} />\r\n    <Route path=\"contact-us\" component={ContactPage} />\r\n    <Route path=\"dashboard\">\r\n      <IndexRoute component={Verify(Dashboard)} />\r\n      <Route path=\"inbox\" component={Verify(Inbox)} />\r\n      <Route path=\"conversation\" component={Verify(ComposeMessage)} />\r\n    </Route>\r\n    <Route path=\"*\" component={NotFound} />\r\n  </Route>\r\n)\r\n```\r\n\r\n那么就可以路由路径为\r\n\r\n```js\r\n// routes.js\r\nconst routes = [\r\n  'contact-us',\r\n  'dashboard',\r\n  'dashborad/inbox',\r\n  'dashboard/conversation'\r\n]\r\n\r\nmodule.exports = routes\r\n```\r\n\r\n接下来我们就把生成的 `index.html` 复制到这几个路径下就可以了\r\n\r\n```js\r\n// deploy.js\r\nconst fs = require('fs-extra')\r\nconst routes = require('routes.js')\r\nconst path = require('path')\r\nroutes.forEach((route) => {\r\n  fs.copySync('index.html', path.join(route, 'index.html'))\r\n})\r\n```\r\n\r\n这样用户访问就不会出现 404 了，SPA 的功能也不受影响，为了方便我们可以把这个生成工具集成到 `package.json`\r\n\r\n```json\r\n{\r\n  \"script\": {\r\n    \"build\": \"NODE_ENV=production webpack --progress && node deploy.js\"\r\n  }\r\n}\r\n```\r\n\r\nok, 当我们运行 `npm run build` 时候，就会同时生成对应路径下的 `index.html`，这样就可以了完成我们所需要的功能了\r\n\r\n### 问题 & 思考\r\n\r\n> 404 页面问题\r\n\r\n这个就直接使用服务端 404 页面了，如果是用 `GitHub pages` 的话，我们可以直接生成一个 `404.html` 即可。或者是将 404 路由跳转到首页\r\n\r\n还有一种做法，直接把 404 页面弄成跟 index 内容一样，404 时候就是正常的内容页面，这时候页面功能是正常的，并且不需要前面的一对做法了。"},{"url":"https://api.github.com/repos/LoeiFy/Recordum/issues/14","repository_url":"https://api.github.com/repos/LoeiFy/Recordum","labels_url":"https://api.github.com/repos/LoeiFy/Recordum/issues/14/labels{/name}","comments_url":"https://api.github.com/repos/LoeiFy/Recordum/issues/14/comments","events_url":"https://api.github.com/repos/LoeiFy/Recordum/issues/14/events","html_url":"https://github.com/LoeiFy/Recordum/issues/14","id":205319771,"number":14,"title":"记录一下折腾黑苹果过程","user":{"login":"LoeiFy","id":2193211,"avatar_url":"https://avatars0.githubusercontent.com/u/2193211?v=4","gravatar_id":"","url":"https://api.github.com/users/LoeiFy","html_url":"https://github.com/LoeiFy","followers_url":"https://api.github.com/users/LoeiFy/followers","following_url":"https://api.github.com/users/LoeiFy/following{/other_user}","gists_url":"https://api.github.com/users/LoeiFy/gists{/gist_id}","starred_url":"https://api.github.com/users/LoeiFy/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/LoeiFy/subscriptions","organizations_url":"https://api.github.com/users/LoeiFy/orgs","repos_url":"https://api.github.com/users/LoeiFy/repos","events_url":"https://api.github.com/users/LoeiFy/events{/privacy}","received_events_url":"https://api.github.com/users/LoeiFy/received_events","type":"User","site_admin":false},"labels":[{"id":531939314,"url":"https://api.github.com/repos/LoeiFy/Recordum/labels/CustoMac","name":"CustoMac","color":"0e8a16","default":false},{"id":531938577,"url":"https://api.github.com/repos/LoeiFy/Recordum/labels/Sierra","name":"Sierra","color":"b60205","default":false}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2017-02-04T03:34:16Z","updated_at":"2017-03-17T01:18:48Z","closed_at":null,"author_association":"OWNER","body":"也算是完成了读书时候的心愿，以前读书时候老想着弄个黑苹果，但是一直没有成功。最近折腾安装前后花的时间就两三天那样，参考了一堆前人经验，所以不会很折腾，总体上算是完美的\r\n\r\n<!-- more -->\r\n\r\n## 黑苹果情况\r\n\r\n![screen shot 2017-02-04 at 10 30 35 am](https://cloud.githubusercontent.com/assets/2193211/22615077/d8cde9de-eac7-11e6-98be-6531cc36bc61.png)\r\n\r\n### 正常部分\r\n\r\n- 显卡(HD530)，声卡，网卡驱动正常\r\n- USB 3 识别正常\r\n- CPU 可以变频\r\n- SSD TRIM 正常\r\n\r\n### 问题\r\n\r\n- 不能休眠/睡眠，因为是台式机，不理会\r\n- 开机偶尔会出现禁止符号，拔掉/换接口 usb 就可以，应该是 usb 驱动问题吧，经常不关机不理会\r\n- 开机过程会有一瞬间花屏现象，不影响使用，不理会\r\n\r\n## 机器配置\r\n\r\n- CPU: i5-6500 散 \r\n- 主板: 微星 B150i GAMING PRO \r\n- 内存: 金士顿 8G*2 \r\n- 显卡: 内置集显\r\n- 机箱: 迎广肖邦\r\n- 电源: 机箱内置 \r\n- SSD: Crucial_CT960M500 (之前没有用到的) \r\n\r\n## 安装过程\r\n\r\n主要参考：https://www.tonymacx86.com/threads/unibeast-install-macos-sierra-on-any-supported-intel-based-pc.200564/\r\n\r\n需要 3 个软件 `UniBeast`, `MultiBeast`, `Clover Configurator`\r\n\r\nusb 启动盘相关都是在 MacBook air 上操作的，教程上制作软件需要在英文系统下操作\r\n\r\n### BIOS 设置\r\n\r\n- settings\\高级\\整合周边设备： SATA模式 - AHCI模式\r\n\r\n- settings\\高级\\USB设置： XHCI Hand-off - 允许\r\n\r\n- settings\\高级\\超级IO配置\\串口0配置： 串口0 - 禁止\r\n\r\n- settings\\启动： 启动模式选择 - UEFI\r\n\r\n- Overclocking\\CPU 特征： CFG 锁定 - 禁止\r\n\r\n- ~~Overclocking\\CPU 特征： Intel 虚拟化技术 - 禁止 ／ Intel VT-D 技术 - 禁止~~\r\n\r\n### UniBeast 制作安装启动盘\r\n\r\n- 格式化 U 盘：USB/OS X Extended (Journaled)/GUID Partition Map\r\n- 写入 macOS Sierra 镜像，过程有点长，慢慢等\r\n\r\n安装完成将需要的设置软件 `MultiBeast`, `Clover Configurator` 拖入 U 盘保存，后续需要\r\n\r\n### 安装系统\r\n\r\n- 开机 F11 选择 U 盘启动\r\n- 磁盘工具格式化硬盘：Sierra/OS X Extended (Journaled)/GUID Partition Map\r\n- 安装，然后提示重启\r\n- 重启后选择 U 盘启动，启动刚刚安装的 Sierra，继续完成安装\r\n\r\n### 系统设置\r\n\r\n完成安装后，这时候系统还没有相关驱动，打开相应软件进行设置\r\n\r\n> 使用 `MutiBeast` 进行驱动相关设置\r\n\r\n- Quick Start: UEFI Boot Mode\r\n- Audio: Realtek ALCxxx - ALC887/888b, Optional HD 3000/HD 4000/HD 530 HDMI Audio\r\n- Network: Realtek - RealtekRTL8111 v2.2.1\r\n- Graphics Configuration: Intel HD 530\r\n- SSDT Options: Sandy Bridge Core i5\r\n\r\n> plist 设置\r\n\r\n使用 `Clover Configurator` mount EFI 分区，用 sublime 打开 EFI/CLOVER/config.plist，添加对应字段\r\n\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\r\n<plist version=\"1.0\">\r\n<dict>\r\n\t<key>Devices</key>\r\n\t<dict>\r\n\t\t<key>AddProperties</key>\r\n\t\t<array>\r\n\t\t\t<dict>\r\n\t\t\t\t<key>Device</key>\r\n\t\t\t\t<string>IntelGFX</string>\r\n\t\t\t\t<key>Key</key>\r\n\t\t\t\t<string>AAPL,Gfx324</string>\r\n\t\t\t\t<key>Value</key>\r\n\t\t\t\t<data>\r\n\t\t\t\tAQAAAA==\r\n\t\t\t\t</data>\r\n\t\t\t</dict>\r\n\t\t\t<dict>\r\n\t\t\t\t<key>Device</key>\r\n\t\t\t\t<string>IntelGFX</string>\r\n\t\t\t\t<key>Key</key>\r\n\t\t\t\t<string>AAPL,GfxYTile</string>\r\n\t\t\t\t<key>Value</key>\r\n\t\t\t\t<data>\r\n\t\t\t\tAQAAAA==\r\n\t\t\t\t</data>\r\n\t\t\t</dict>\r\n\t\t\t<dict>\r\n\t\t\t\t<key>Device</key>\r\n\t\t\t\t<string>IntelGFX</string>\r\n\t\t\t\t<key>Key</key>\r\n\t\t\t\t<string>AAPL00,PanelCycleDelay</string>\r\n\t\t\t\t<key>Value</key>\r\n\t\t\t\t<data>\r\n\t\t\t\t+gAAAA==\r\n\t\t\t\t</data>\r\n\t\t\t</dict>\r\n\t\t\t<dict>\r\n\t\t\t\t<key>Device</key>\r\n\t\t\t\t<string>IntelGFX</string>\r\n\t\t\t\t<key>Key</key>\r\n\t\t\t\t<string>AAPL00,PanelPowerDown</string>\r\n\t\t\t\t<key>Value</key>\r\n\t\t\t\t<data>\r\n\t\t\t\tPAAAAA==\r\n\t\t\t\t</data>\r\n\t\t\t</dict>\r\n\t\t\t<dict>\r\n\t\t\t\t<key>Device</key>\r\n\t\t\t\t<string>IntelGFX</string>\r\n\t\t\t\t<key>Key</key>\r\n\t\t\t\t<string>AAPL00,PanelPowerOff</string>\r\n\t\t\t\t<key>Value</key>\r\n\t\t\t\t<data>\r\n\t\t\t\tEQAAAA==\r\n\t\t\t\t</data>\r\n\t\t\t</dict>\r\n\t\t\t<dict>\r\n\t\t\t\t<key>Device</key>\r\n\t\t\t\t<string>IntelGFX</string>\r\n\t\t\t\t<key>Key</key>\r\n\t\t\t\t<string>AAPL00,PanelPowerOn</string>\r\n\t\t\t\t<key>Value</key>\r\n\t\t\t\t<data>\r\n\t\t\t\tGQEAAA==\r\n\t\t\t\t</data>\r\n\t\t\t</dict>\r\n\t\t\t<dict>\r\n\t\t\t\t<key>Device</key>\r\n\t\t\t\t<string>IntelGFX</string>\r\n\t\t\t\t<key>Key</key>\r\n\t\t\t\t<string>AAPL00,PanelPowerUp</string>\r\n\t\t\t\t<key>Value</key>\r\n\t\t\t\t<data>\r\n\t\t\t\tMAAAAA==\r\n\t\t\t\t</data>\r\n\t\t\t</dict>\r\n\t\t\t<dict>\r\n\t\t\t\t<key>Device</key>\r\n\t\t\t\t<string>IntelGFX</string>\r\n\t\t\t\t<key>Key</key>\r\n\t\t\t\t<string>graphic-options</string>\r\n\t\t\t\t<key>Value</key>\r\n\t\t\t\t<data>\r\n\t\t\t\tDAAAAA==\r\n\t\t\t\t</data>\r\n\t\t\t</dict>\r\n\t\t\t<dict>\r\n\t\t\t\t<key>Device</key>\r\n\t\t\t\t<string>IntelGFX</string>\r\n\t\t\t\t<key>Key</key>\r\n\t\t\t\t<string>hda-gfx</string>\r\n\t\t\t\t<key>Value</key>\r\n\t\t\t\t<string>onboard-1</string>\r\n\t\t\t</dict>\r\n\t\t</array>\r\n\t</dict>\r\n</dict>\r\n</plist>\r\n```\r\n\r\n> kexts\r\n\r\n复制 `FakeSMC.kext`, `RealtekRTL8111.kext`, `VoodooHDA.kext` 到 EFI/CLOVER／kexts／other\r\n\r\n> ssd trim\r\n\r\n输入相关命令重启即可\r\n\r\n```bash\r\nsudo trimforce enable\r\n```\r\n\r\n> 默认启动 \r\n\r\nconfig.plist／Boot/DefaultVolume 的 ‘值’ 改成你的启动盘(Sierra)，默认为 macHDD\r\n"},{"url":"https://api.github.com/repos/LoeiFy/Recordum/issues/13","repository_url":"https://api.github.com/repos/LoeiFy/Recordum","labels_url":"https://api.github.com/repos/LoeiFy/Recordum/issues/13/labels{/name}","comments_url":"https://api.github.com/repos/LoeiFy/Recordum/issues/13/comments","events_url":"https://api.github.com/repos/LoeiFy/Recordum/issues/13/events","html_url":"https://github.com/LoeiFy/Recordum/issues/13","id":196350551,"number":13,"title":"Adobe CEP 扩展相关","user":{"login":"LoeiFy","id":2193211,"avatar_url":"https://avatars0.githubusercontent.com/u/2193211?v=4","gravatar_id":"","url":"https://api.github.com/users/LoeiFy","html_url":"https://github.com/LoeiFy","followers_url":"https://api.github.com/users/LoeiFy/followers","following_url":"https://api.github.com/users/LoeiFy/following{/other_user}","gists_url":"https://api.github.com/users/LoeiFy/gists{/gist_id}","starred_url":"https://api.github.com/users/LoeiFy/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/LoeiFy/subscriptions","organizations_url":"https://api.github.com/users/LoeiFy/orgs","repos_url":"https://api.github.com/users/LoeiFy/repos","events_url":"https://api.github.com/users/LoeiFy/events{/privacy}","received_events_url":"https://api.github.com/users/LoeiFy/received_events","type":"User","site_admin":false},"labels":[{"id":175174882,"url":"https://api.github.com/repos/LoeiFy/Recordum/labels/Adobe","name":"Adobe","color":"207de5","default":false},{"id":175183154,"url":"https://api.github.com/repos/LoeiFy/Recordum/labels/Extension","name":"Extension","color":"eb6420","default":false},{"id":531938099,"url":"https://api.github.com/repos/LoeiFy/Recordum/labels/Photoshop","name":"Photoshop","color":"c5def5","default":false}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2016-12-19T07:48:21Z","updated_at":"2017-02-12T11:58:28Z","closed_at":null,"author_association":"OWNER","body":"Adobe 系列通常情况下宿主应用是不会运行未经签名扩展的，只有打包并签名才可以运行。但是可以打开开发者模式\r\n\r\n<!-- more -->\r\n\r\n## 启用开发者模式\r\n\r\n> Windows\r\n\r\n打开到注册表定位到: ( 高版本类推 )\r\n\r\n- CC 2014: `HKEY_CURRENT_USER\\Software\\Adobe\\CSXS.5`\r\n- CC 2015: `HKEY_CURRENT_USER\\Software\\Adobe\\CSXS.6`\r\n\r\n将 `PlayerDebugMode` 设置为 `1`\r\n\r\n> macOS\r\n\r\n终端输入: ( 同样高版本类推 )\r\n\r\n`defaults write com.adobe.CSXS.6 PlayerDebugMode 1`\r\n\r\n##  扩展签名打包\r\n\r\n使用 Adobe 官方提供的 ZXPSignCmd\r\nhttps://github.com/Adobe-CEP/CEP-Resources/tree/master/ZXPSignCMD\r\n\r\n![71097-6671c44f605ce86a](https://cloud.githubusercontent.com/assets/2193211/21304385/cae9241a-c5ff-11e6-98fb-1ef0e84ee80e.png)\r\n\r\n以下为 macOS 下操作，Windows 类似。先进入文件目录\r\n\r\n### 创建证书\r\n\r\n```bash\r\n./ZXPSignCmd -selfSignedCert <countryCode> <stateOrProvince> <organization> <commonName> <password> <outputPath.p12>\r\n./ZXPSignCmd -selfSignedCert <国家代码> <地区> <组织名> <证书所有者名称> <证书密码> <证书名.p12>\r\n\r\n# example\r\n./ZXPSignCmd -selfSignedCert CN guangzhou lorem.in loeify aksdj4 lorem.p12\r\n```\r\n\r\n### 签名并打包\r\n\r\n```bash\r\n./ZXPSignCmd -sign <inputDirectory> <outputZxp> <p12> <p12Password>\r\n./ZXPSignCmd -sign <要打包的项目目录> <输出文件路径> <证书路径> <证书密码>\r\n\r\n# example\r\n./ZXPSignCmd -sign xxx xxx.zxp lorem.p12 aksdj4\r\n```\r\n\r\n打包生成后的 `zxp` 是 `zip` 一样的可以解压\r\n\r\n## 手动安装插件\r\n\r\n### 目录\r\n\r\n将插件解压，放进目录\r\n\r\n> Windows\r\n\r\n`C:\\Program Files\\Common Files\\Adobe\\CEP\\extensions\\`\r\n\r\n> macOS ( 注意是全局 Library，不是用户的 )\r\n\r\n`/Library/Application Support/Adobe/CEP/extensions/`\r\n\r\n注意最终插件 xxx 放入目录最终应该存在 `/extensions/xxx/index.html`\r\n\r\n### 启用\r\n\r\n重启 photoshop，选择 \"Window\" → \"Extensions\" → \"xxx\" 启用 \r\n\r\n## 参考文章\r\n\r\n- [Adobe CEP 扩展开发教程 「 4 」签名与打包](http://nullice.com/archives/1741)\r\n- [Adobe CEP 扩展开发教程 「 1 」Hello World!](http://nullice.com/archives/1665)"},{"url":"https://api.github.com/repos/LoeiFy/Recordum/issues/11","repository_url":"https://api.github.com/repos/LoeiFy/Recordum","labels_url":"https://api.github.com/repos/LoeiFy/Recordum/issues/11/labels{/name}","comments_url":"https://api.github.com/repos/LoeiFy/Recordum/issues/11/comments","events_url":"https://api.github.com/repos/LoeiFy/Recordum/issues/11/events","html_url":"https://github.com/LoeiFy/Recordum/issues/11","id":126817142,"number":11,"title":"Mirror - 基于 issues 的博客工具","user":{"login":"LoeiFy","id":2193211,"avatar_url":"https://avatars0.githubusercontent.com/u/2193211?v=4","gravatar_id":"","url":"https://api.github.com/users/LoeiFy","html_url":"https://github.com/LoeiFy","followers_url":"https://api.github.com/users/LoeiFy/followers","following_url":"https://api.github.com/users/LoeiFy/following{/other_user}","gists_url":"https://api.github.com/users/LoeiFy/gists{/gist_id}","starred_url":"https://api.github.com/users/LoeiFy/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/LoeiFy/subscriptions","organizations_url":"https://api.github.com/users/LoeiFy/orgs","repos_url":"https://api.github.com/users/LoeiFy/repos","events_url":"https://api.github.com/users/LoeiFy/events{/privacy}","received_events_url":"https://api.github.com/users/LoeiFy/received_events","type":"User","site_admin":false},"labels":[{"id":534950544,"url":"https://api.github.com/repos/LoeiFy/Recordum/labels/Blog","name":"Blog","color":"f9d0c4","default":false},{"id":534950402,"url":"https://api.github.com/repos/LoeiFy/Recordum/labels/Github","name":"Github","color":"bfd4f2","default":false},{"id":534950261,"url":"https://api.github.com/repos/LoeiFy/Recordum/labels/Nodejs","name":"Nodejs","color":"bfdadc","default":false}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":{"url":"https://api.github.com/repos/LoeiFy/Recordum/milestones/1","html_url":"https://github.com/LoeiFy/Recordum/milestone/1","labels_url":"https://api.github.com/repos/LoeiFy/Recordum/milestones/1/labels","id":2983644,"number":1,"title":"blog","description":"","creator":{"login":"LoeiFy","id":2193211,"avatar_url":"https://avatars0.githubusercontent.com/u/2193211?v=4","gravatar_id":"","url":"https://api.github.com/users/LoeiFy","html_url":"https://github.com/LoeiFy","followers_url":"https://api.github.com/users/LoeiFy/followers","following_url":"https://api.github.com/users/LoeiFy/following{/other_user}","gists_url":"https://api.github.com/users/LoeiFy/gists{/gist_id}","starred_url":"https://api.github.com/users/LoeiFy/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/LoeiFy/subscriptions","organizations_url":"https://api.github.com/users/LoeiFy/orgs","repos_url":"https://api.github.com/users/LoeiFy/repos","events_url":"https://api.github.com/users/LoeiFy/events{/privacy}","received_events_url":"https://api.github.com/users/LoeiFy/received_events","type":"User","site_admin":false},"open_issues":5,"closed_issues":0,"state":"open","created_at":"2017-12-16T07:05:42Z","updated_at":"2017-12-16T07:09:01Z","due_on":null,"closed_at":null},"comments":45,"created_at":"2016-01-15T06:44:56Z","updated_at":"2017-12-16T07:08:42Z","closed_at":null,"author_association":"OWNER","body":"Mirror 是一个简单的博客工具，基于 GitHub API 获取 issues 数据，然后展示在页面上。\r\n\r\n该工具的方便之处在于只需要在 issue 上写你的博客文章，你的网站会自动更新博客内容。\r\n\r\n借助 GitHub，你可以轻松的用 markdown 书写你的博客内容，永久保存，不用担心数据丢失问题。还可以非常方便上传博客图片，拖入编辑器即可。\r\n\r\n该博客工具非常适合以 issue 作为自己博客的用户，无痛生成博客网站，对原来内容毫无影响\r\n\r\nMirror 还支持多用户协作，你可以方便的设置哪些用户写的内容可以显示在博客网站上，避免无关内容\r\n\r\nMirror 在移动端同时有很好的浏览体验\r\n\r\n## 预览地址\r\n\r\nhttp://mirror.am0200.com/\r\n\r\n## 项目地址\r\n\r\nhttps://github.com/LoeiFy/Mirror\r\n\r\n新版本使用 GitHub [GraphQL](https://developer.github.com/v4/) API\r\n\r\n`REST API` 版本：https://github.com/LoeiFy/Mirror/tree/rest-api\r\n\r\nDemo：http://mirror.am0200.com/rest-api/\r\n\r\n更详细的介绍可以看项目说明\r\n\r\n## 如何安装\r\n\r\n安装很简单，需要一个 nodejs 环境，一个简单的命令即可，如果没有 nodejs 环境，可以直接下载资源包自己配置，后面会有说明\r\n\r\n```bash\r\n$ sudo npm install Mirror -g\r\n```\r\n\r\n## 使用\r\n\r\n### 新建\r\n\r\n```bash\r\n$ cd newblog\r\n$ mirror init \r\n```\r\n\r\n或者\r\n\r\n```bash\r\n$ mirror init newblog\r\n```\r\n\r\n完成后你的 blog 就在 newblog 这里\r\n\r\n### 配置你的 blog\r\n\r\n首先需要获取你的 access token，这个 token 只要只读权限\r\n\r\nhttps://github.com/settings/tokens\r\n\r\n只需要勾选两个选择，其他不要勾选\r\n\r\n- read:user Read all user profile data\r\n- user:email Access user email addresses (read-only)\r\n\r\n修改 `config.yml`\r\n\r\n```yml\r\n# 标题\r\ntitle: Mirror\r\n\r\n# github 用户名\r\nuser: LoeiFy\r\n\r\n# blog 内容来源 repo\r\nrepo: Recordum\r\n\r\n# 多用户，设定哪些用户写的 issue 内容可以展示出来，项目的用户名会自动包括进来\r\n# 多个用户用逗号（英文逗号）隔开，例如：user0,user1\r\nauthors: \r\n\r\n# token\r\n# token 需要用 `#` 符号分割\r\n# 例子: 5#c31bffc137f44faf7efc4a84da827g7ca2cfeaa\r\ntoken:\r\n\r\n# 分页\r\nper_page: 10\r\n```\r\n\r\n### 生成博客\r\n\r\n```bash\r\n$ mirror build\r\n```\r\n\r\n### 发布你的 blog\r\n\r\n你可以添加域名到 `CNAME`\r\n\r\npush 文件到一个 repo 的 `gh-pages` 分支\r\n\r\n参考例子：https://github.com/LoeiFy/Mirror/tree/gh-pages\r\n\r\n### 最后\r\n\r\n现在你可以在 github issue  上写博客了，内容会同步更新\r\n\r\n> 一个例子\r\n\r\n在 https://github.com/LoeiFy/Recordum/issues 这个 issue 上写博客内容，对应网站 http://mirror.am0200.com/ 会自动同步更新内容\r\n\r\n## 另一种安装方式\r\n\r\n你可以直接下载资源包，下载最新的 release，然后打开 `index.html` 进行配置，按照例子进行配置即可\r\n\r\nhttps://github.com/LoeiFy/Mirror/raw/master/mirror.zip\r\n\r\n```html\r\n<!-- index.html -->\r\n\r\n<script>\r\n/*\r\n**\r\n** blog config here\r\n** token should be separated by '#'.\r\n** example: 5#c31bffc137f44faf7efcs4544da827g7ca2cfeaa\r\n** muti-authors should be separated by ','. and the user is included in.\r\n** example: 'LoeiFy, author0'\r\n**\r\n*/\r\n\r\nwindow.config = {\"title\":\"\",\"user\":\"\",\"repository\":\"\",\"authors\":\"\",\"perpage\":\"\",\"token\":\"\"}\r\n</script>\r\n```\r\n\r\n配置好后，可以先尝试本地预览，需要一个本地服务器，放上去访问 `index.html` 即可，测试没问题就可以把全部文件上传到对应地址即可，也可以放到 GitHub pages 上\r\n\r\n## 名字来源\r\n\r\n`Mirror` 是 `DJ Okawari` 所作的专辑\r\n\r\n![mirror](https://cloud.githubusercontent.com/assets/2193211/12321915/c66d8b12-baeb-11e5-9612-b188f5272e3b.jpg)\r\n"},{"url":"https://api.github.com/repos/LoeiFy/Recordum/issues/7","repository_url":"https://api.github.com/repos/LoeiFy/Recordum","labels_url":"https://api.github.com/repos/LoeiFy/Recordum/issues/7/labels{/name}","comments_url":"https://api.github.com/repos/LoeiFy/Recordum/issues/7/comments","events_url":"https://api.github.com/repos/LoeiFy/Recordum/issues/7/events","html_url":"https://github.com/LoeiFy/Recordum/issues/7","id":71470122,"number":7,"title":"输入框输入值自动格式化","user":{"login":"LoeiFy","id":2193211,"avatar_url":"https://avatars0.githubusercontent.com/u/2193211?v=4","gravatar_id":"","url":"https://api.github.com/users/LoeiFy","html_url":"https://github.com/LoeiFy","followers_url":"https://api.github.com/users/LoeiFy/followers","following_url":"https://api.github.com/users/LoeiFy/following{/other_user}","gists_url":"https://api.github.com/users/LoeiFy/gists{/gist_id}","starred_url":"https://api.github.com/users/LoeiFy/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/LoeiFy/subscriptions","organizations_url":"https://api.github.com/users/LoeiFy/orgs","repos_url":"https://api.github.com/users/LoeiFy/repos","events_url":"https://api.github.com/users/LoeiFy/events{/privacy}","received_events_url":"https://api.github.com/users/LoeiFy/received_events","type":"User","site_admin":false},"labels":[{"id":548066947,"url":"https://api.github.com/repos/LoeiFy/Recordum/labels/Javascript","name":"Javascript","color":"d4c5f9","default":false}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":{"url":"https://api.github.com/repos/LoeiFy/Recordum/milestones/1","html_url":"https://github.com/LoeiFy/Recordum/milestone/1","labels_url":"https://api.github.com/repos/LoeiFy/Recordum/milestones/1/labels","id":2983644,"number":1,"title":"blog","description":"","creator":{"login":"LoeiFy","id":2193211,"avatar_url":"https://avatars0.githubusercontent.com/u/2193211?v=4","gravatar_id":"","url":"https://api.github.com/users/LoeiFy","html_url":"https://github.com/LoeiFy","followers_url":"https://api.github.com/users/LoeiFy/followers","following_url":"https://api.github.com/users/LoeiFy/following{/other_user}","gists_url":"https://api.github.com/users/LoeiFy/gists{/gist_id}","starred_url":"https://api.github.com/users/LoeiFy/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/LoeiFy/subscriptions","organizations_url":"https://api.github.com/users/LoeiFy/orgs","repos_url":"https://api.github.com/users/LoeiFy/repos","events_url":"https://api.github.com/users/LoeiFy/events{/privacy}","received_events_url":"https://api.github.com/users/LoeiFy/received_events","type":"User","site_admin":false},"open_issues":5,"closed_issues":0,"state":"open","created_at":"2017-12-16T07:05:42Z","updated_at":"2017-12-16T07:09:01Z","due_on":null,"closed_at":null},"comments":3,"created_at":"2015-04-28T03:50:13Z","updated_at":"2017-12-18T08:49:25Z","closed_at":null,"author_association":"OWNER","body":"这里说的自动格式化是指当用户在输入框里面输入数字，例如银行卡号，为了方便用户输入，希望在输入过程中对输入数字进行加空格处理，优化用户体验\r\n\r\n<!-- more -->\r\n\r\n先看一下例子: http://jsfiddle.net/am0200/qugp8tvL/\r\n\r\n注意例子里面的输入框的类型是 `tel`，而不是 `number`，主要原因是 `number` 类型\r\n\r\n- 会导致 Android 上某些系统不显示 `placeholder`\r\n- 无法插入非数字内容，例如空格\r\n\r\n### 代码实现\r\n\r\n`data-gap` 代表第几位开始加空格，不为 0\r\n\r\n``` html\r\n<input data-gap=4 maxlength=\"24\" size=\"30\" autocomplete=\"off\" type=\"tel\" placeholder=\"请输入卡号\"/>\r\n```\r\n\r\n原理就是获取用户输入内容，格式化处理完成后再填入输入框\r\n\r\n``` js\r\nvar input = document.querySelectorAll('input')[0]\r\nvar gap = parseInt(input.getAttribute('data-gap'))\r\n\r\ninput.oninput = function() {\r\n  var numbers = this.value.replace(/\\s+/g, '').split('')     // 获取原始值\r\n  var back = '' \r\n\r\n  numbers.forEach(function(n, i) {\r\n    back += n + ((i + 1) % gap === 0 ? ' ' : '')    // 处理加空格\r\n  })\r\n  \r\n  var len = back.length\r\n  var last = back.charAt(len - 1)\r\n\r\n  if (last === ' ' || isNaN(last)) {\r\n    back = back.substring(0, len - 1)    // 移除末尾无用字符\r\n  }\r\n\r\n  this.value = back\r\n  \r\n  // 兼容处理\r\n  setTimeout(function() {\r\n    this.setSelectionRange(len, len)\r\n    this.focus()\r\n  }.bind(this), 0)\r\n}\r\n```\r\n\r\n获取输入原始值\r\n\r\n```js\r\ninput.value.replace(/\\s+/g, '')\r\n```\r\n\r\n### 扩展\r\n\r\n可以设置格式化分割字符，例如用 `-` 代替空格，还可以设定不规则位数空格，具体可以修改处理条件即可\r\n"},{"url":"https://api.github.com/repos/LoeiFy/Recordum/issues/6","repository_url":"https://api.github.com/repos/LoeiFy/Recordum","labels_url":"https://api.github.com/repos/LoeiFy/Recordum/issues/6/labels{/name}","comments_url":"https://api.github.com/repos/LoeiFy/Recordum/issues/6/comments","events_url":"https://api.github.com/repos/LoeiFy/Recordum/issues/6/events","html_url":"https://github.com/LoeiFy/Recordum/issues/6","id":71329290,"number":6,"title":"创建类似 http://ithinkimight.com/ 随机大小排布界面","user":{"login":"LoeiFy","id":2193211,"avatar_url":"https://avatars0.githubusercontent.com/u/2193211?v=4","gravatar_id":"","url":"https://api.github.com/users/LoeiFy","html_url":"https://github.com/LoeiFy","followers_url":"https://api.github.com/users/LoeiFy/followers","following_url":"https://api.github.com/users/LoeiFy/following{/other_user}","gists_url":"https://api.github.com/users/LoeiFy/gists{/gist_id}","starred_url":"https://api.github.com/users/LoeiFy/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/LoeiFy/subscriptions","organizations_url":"https://api.github.com/users/LoeiFy/orgs","repos_url":"https://api.github.com/users/LoeiFy/repos","events_url":"https://api.github.com/users/LoeiFy/events{/privacy}","received_events_url":"https://api.github.com/users/LoeiFy/received_events","type":"User","site_admin":false},"labels":[{"id":534950544,"url":"https://api.github.com/repos/LoeiFy/Recordum/labels/Blog","name":"Blog","color":"f9d0c4","default":false},{"id":548067165,"url":"https://api.github.com/repos/LoeiFy/Recordum/labels/Grid","name":"Grid","color":"0e8a16","default":false},{"id":548066947,"url":"https://api.github.com/repos/LoeiFy/Recordum/labels/Javascript","name":"Javascript","color":"d4c5f9","default":false}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":{"url":"https://api.github.com/repos/LoeiFy/Recordum/milestones/1","html_url":"https://github.com/LoeiFy/Recordum/milestone/1","labels_url":"https://api.github.com/repos/LoeiFy/Recordum/milestones/1/labels","id":2983644,"number":1,"title":"blog","description":"","creator":{"login":"LoeiFy","id":2193211,"avatar_url":"https://avatars0.githubusercontent.com/u/2193211?v=4","gravatar_id":"","url":"https://api.github.com/users/LoeiFy","html_url":"https://github.com/LoeiFy","followers_url":"https://api.github.com/users/LoeiFy/followers","following_url":"https://api.github.com/users/LoeiFy/following{/other_user}","gists_url":"https://api.github.com/users/LoeiFy/gists{/gist_id}","starred_url":"https://api.github.com/users/LoeiFy/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/LoeiFy/subscriptions","organizations_url":"https://api.github.com/users/LoeiFy/orgs","repos_url":"https://api.github.com/users/LoeiFy/repos","events_url":"https://api.github.com/users/LoeiFy/events{/privacy}","received_events_url":"https://api.github.com/users/LoeiFy/received_events","type":"User","site_admin":false},"open_issues":5,"closed_issues":0,"state":"open","created_at":"2017-12-16T07:05:42Z","updated_at":"2017-12-16T07:09:01Z","due_on":null,"closed_at":null},"comments":0,"created_at":"2015-04-27T16:00:36Z","updated_at":"2017-12-16T07:09:01Z","closed_at":null,"author_association":"OWNER","body":"`ithinkimight.com` 这个网站图片来自 Instagram，图片随机大小，位置也是随机，图片可以重叠，但是并没有 **过分** 重叠。这种随机大小，位置排版页面元素跟平常的整齐 `grid` 或者 `瀑布流` 风格很不一样，下面我们尝试一下实现类似效果\r\n\r\n<!-- more -->\r\n\r\n从网站源文件上看并不能看出网站是如何随机排布这些图片，因为是后端直接输出图片的位置参数，并不是前端实现的位置计算。不过这里有一种简单方法，可以实现类似效果。先看一下具体效果\r\n\r\n### 例子以及实际运用效果\r\n\r\nhttp://jsfiddle.net/am0200/1mn5xbf8/\r\n\r\nhttp://stone.am0200.com/\r\n\r\n### 实现思路\r\n\r\n首先把 container 划分为 4 个块，然后需要随机定位的 4 个块分别放到这 4 个区域，最后定义这 4 个块距离左边跟上边的最远，最近距离即可\r\n\r\n### 实现代码\r\n\r\nhtml 部分，我们只是生成 4 个容器，每个容器都可以放置一张图片\r\n\r\n``` html\r\n<section>\r\n    <div id=\"d0\"></div>\r\n    <div id=\"d1\"></div>\r\n    <div id=\"d2\"></div>\r\n    <div id=\"d3\"></div>\r\n</section>\r\n```\r\n\r\ncss 部分，我们使用绝对定位来设置每个容器的主要位置\r\n\r\n``` css\r\nsection {\r\n    width: 100%;\r\n    height: 100%;\r\n    position: relative;\r\n}\r\nsection div {\r\n    position: absolute;\r\n}\r\n#d0 {\r\n    left: 50%;\r\n    top: 0;\r\n}\r\n#d1 {\r\n    top: 50%;\r\n    left: 50%;\r\n}\r\n#d2 {\r\n    left: 0;\r\n    top: 50%;\r\n}\r\n#d3 {\r\n    left: 0;\r\n    top: 0;\r\n}\r\n```\r\n\r\njs 部分，我们设置 4 个块随机大小，并且随机上下左右距离，需要注意的是，这个距离是有一定的范围的\r\n\r\n``` js\r\nfunction rd(n,m){\r\n    var c = m-n+1;  \r\n    return Math.floor(Math.random() * c + n);\r\n}\r\n\r\nvar w = parseInt($('section').width()),\r\n    h = parseInt($('section').height());\r\n\r\n$('div').each(function() {\r\n    var wh = rd(150, 200)\r\n    $(this).css({\r\n        width: wh,\r\n        height: wh\r\n    })\r\n})\r\n\r\nvar d0 = parseInt($('#d0').width()),\r\n    d1 = parseInt($('#d1').width()),\r\n    d2 = parseInt($('#d2').width()),\r\n    d3 = parseInt($('#d3').width());\r\n\r\nvar a1 = rd(-(d0 / 4), w / 2 - d0),\r\n    a2 = rd(0, h / 2 - d0 / 4 * 3);\r\n\r\nvar b1 = rd(-(d1 / 4), w / 2 - d1),\r\n    b2 = rd(-(d1 / 4), h / 2 - d1);\r\n\r\nvar c1 = rd(0, w / 2 - d2 / 4 * 3),\r\n    c2 = rd(-(d2 / 4), h / 2 - d2);    \r\n\r\nvar e1 = rd(0, w / 2 - d3 / 4 * 3),\r\n    e2 = rd(0, h / 2 - d3 / 4 * 3); \r\n\r\n\r\n$('#d0').css('margin-left', a1 +'px')\r\n$('#d0').css('margin-top', a2 +'px')\r\n\r\n$('#d1').css('margin-left', b1 +'px')\r\n$('#d1').css('margin-top', b2 +'px')\r\n\r\n$('#d2').css('margin-left', c1 +'px')\r\n$('#d2').css('margin-top', c2 +'px')\r\n\r\n$('#d3').css('margin-left', e1 +'px')\r\n$('#d3').css('margin-top', e2 +'px')\r\n\r\n```\r\n\r\n### 其他问题\r\n\r\n这种定位简单方便，但是如果是单数块的时候，就要做一下相关处理了\r\n"}]
